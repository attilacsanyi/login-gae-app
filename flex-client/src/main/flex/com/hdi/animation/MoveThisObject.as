package  com.hdi.animation{		/**	 * MoveThis : 1/30/11 : version 1.06	 * 	 * Tween object and settings for MoveThisEngine	 * 	 * Author:Todd Williams	 * http://www.taterboy.com/	 * http://hdinteractive.com/	 **/		import flash.geom.ColorTransform;	import com.hdi.animation.easing.Easing;		public class MoveThisObject {				//-------------------------------		// CORE		//--------------------------------		public var targetObj:Object = null;						// object who's properties will be tweened		public var frames:int = 24;								// the span of frames for the tween		public var propStr:String;								// the name of the property to be tweened		public var startValue:Number;							// the starting value of the property		public var finValue:Number;								// the final value of the propert at the end of the tween		public var changeValue:Number;							// the amount the property value will change over the tween				//----------------------------------		//EXTRAS		//-----------------------------------		public var ease:Number;									// value to ease the tween, mimics Flash IDE ease value, -1 to 1		public var onComplete:Function = null;					// a function to call once the tween is complete		public var onStart:Function = null;						// a function to call once the tween has started		public var easing:String;								// the reference to an easing function as a string (works for included eases only)		public var easingStrength:Number = 1;					// the amount of ease from an easing function, 0 - 1		public var bounce:Number = 1.75;						// the amount of bounce for the Bounce Easing class, not implemented		public var easingFunction:Function = null;				// an easing function to use on the tween		public var loop:Boolean;								// if the tween should loop		public var loopCount:int;								// the amount of times the tween should loop, 0 = indefinately		public var delay:int;									// the amount of frames to delay a tween		public var uid:int;										// a unique identifier for pause tweens, so they can overwrite an existing pause tween with the same uid		public var onFrame:Function;							// a function to call on each frame of the tween		public var startVisible:Boolean = true;					// over ride defualt functionality that makes all objects visible at the beginning of a tween		public var removeDupes:Boolean;							// control removing duplicate tween on a per tween basis		public var visible:Boolean = true;						// set the objects visible property to false at the end of a tween		public var remove:Boolean;								// remove the object from the display list on complete of a tween		public var smartRotation:Boolean;						// find the shortest rotation from the current angle				//-------------------------------------		//internal		//-------------------------------------		public var currentFrame:int;							// represents the timeline - counts up		public var queueCnt:int;								// amount of time to stay in queue, counts down		public var dir:Boolean;									// the direction of a tween, not in use		public var loopCounter:int;								// the amount of times a tween should loop		private var _stopped:Boolean;							// is the tween stopped, will be removed on next frame		private var _isMoving:Boolean = true;					// this tween is current not queued or being delayed		public var isPaused:Boolean;							// is the tween paused				public function stopTween():void{						// stops the tween			_stopped = true;			_isMoving = false;		}				public function get stopped():Boolean{return _stopped;}				public function set isMoving(val:Boolean):void{	_isMoving = val;}		public function get isMoving():Boolean{ return _isMoving;}				/**		 * load tween settings		 * 		 * @param obj, the object whos property will be tweened		 * @param propt, the property name to be tweened as a string		 * @param propValues, start, finish and change values of the tween		 * @param duration, the amount of frames the tween will span		 * @param extras, an object containing all the extra settings for the tween		 * 		 */		public function MoveThisObject(obj:Object, propt:String, propValues:Object,duration:int=24,extras:Object=null) {						targetObj = obj;			propStr = propt;			startValue = propValues.start;			finValue = propValues.finish;			changeValue = finValue - startValue;			frames = duration;						if(propt == "pause"){				startValue = 0;				frames = finValue;			}						if(extras != null){				loadExtras(extras);			}					}				/**		 * converts the extras object into properties of the MoveThisObject		 * 		 * @private		 */		private function loadExtras(obj:Object):void{			for(var p:String in obj){				try{					this[p] = obj[p];					if(p == "ease"){						if(easing == null){							if(obj[p] < 0){								easing = "Quart.easeIn";							}							else{								easing = "Quart.easeOut"							}							easingStrength = Math.abs(obj[p]);						}					}					if(p == "loop"){						loopCount = obj[p];						loop = true;					}					if(p == "delay"){						_isMoving = false;					}				}				catch(e:Error){throw(new Error("Property does not exist or mismatch " + p  + " : " + obj[p].toString()));}			}		}	}	}