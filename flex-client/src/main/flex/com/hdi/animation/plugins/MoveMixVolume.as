package  com.hdi.animation.plugins{	import com.hdi.animation.MoveThisObject;		import flash.media.SoundTransform;
			public class MoveMixVolume {				//-------------------------------		// required functions		//-------------------------------				/**		 * @required name of plugin function		 * main tweening function		 * 		 * @params moveObj, and instance of MoveThisObject which contains all the settings for the tween		 * @params easingFunction, allows this pluging to use any standard easing functions		 * 		 */		public static function mixVolume(moveObj:MoveThisObject,easingFunction:Function = null):void{						// *** Standard portion of the plugin ---------------------------------------						// tween values once easing funciton has been applied			var moveValue:Number;						//setup default linear transition			var linearValue:Number = moveObj.changeValue*((moveObj.currentFrame/moveObj.frames)*(1-moveObj.easingStrength)) + moveObj.startValue;						// apply the easing function if available			if(easingFunction != null){				moveValue = easingFunction(moveObj.currentFrame, moveObj.startValue, moveObj.changeValue, moveObj.frames);								// adjust easingFunction by easing strength				if(moveObj.easingStrength != 1){					moveValue = (moveValue*moveObj.easingStrength) + linearValue;				}			}			else{				// linear tween				moveValue = linearValue;			}						// *** end standard portion of the plugin ----------------------------------------						//*** Custom Plugin Code - adjust brightness or color transform of object based on moveValue			var trans:SoundTransform = new SoundTransform(moveValue);			moveObj.targetObj.soundTransform = trans;		}				/**		 * @required startValue		 * get the starting property value		 * 		 * @param obj, the object whos property is being animated		 * @param prop, the property name of property or plugin function - brightness		 * 		 * @default 0;		 */		public static function startValue(obj:Object,prop:String):Number{			//get the starting redOffset value of the object - should be the same as blue and green offset.			var trans:SoundTransform = obj.soundTransform;			return trans.volume;		}				/**		 * @required resetValue		 * set the tween value back to the starting value, for looping tweens		 * 		 * @param moveObj, instance of MoveThisObject containing all the tween settings		 */		public static function resetValue(moveObj:MoveThisObject):void{						// get the starting value of the tween and apply it to the object			var trans:SoundTransform = new SoundTransform();			trans.volume = moveObj.startValue;			moveObj.targetObj.soundTransform = trans;		}				//------------------------------------------		// plugin specific functions		//-----------------------------------------				public function MoveMixVolume() {			// constructor code		}	}	}