/**
 * Generated by Gas3 v2.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (Customer.as).
 */

package app.dto {

import flash.events.EventDispatcher;
import flash.utils.IDataInput;
import flash.utils.IDataOutput;
import mx.events.PropertyChangeEvent;

[Bindable]
[Event(name="propertyChange",type="mx.events.PropertyChangeEvent")]
public class CustomerBase extends EventDispatcher {

private var _city:String;
private var _firstname:String;
private var _key:String;
private var _lastname:String;
private var _phone:String;
private var _postal:String;
private var _street:String;
public function CustomerBase(){

}


public function set city(value:String):void {
            if(_city != value){
              var oldValue:String = _city;
              _city = value;
              dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "city", oldValue, value));
            }
        }
public function get city():String {
            return _city;
        }

public function set firstname(value:String):void {
            if(_firstname != value){
              var oldValue:String = _firstname;
              _firstname = value;
              dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "firstname", oldValue, value));
            }
        }
public function get firstname():String {
            return _firstname;
        }

public function set key(value:String):void {
            if(_key != value){
              var oldValue:String = _key;
              _key = value;
              dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "key", oldValue, value));
            }
        }
public function get key():String {
            return _key;
        }

public function set lastname(value:String):void {
            if(_lastname != value){
              var oldValue:String = _lastname;
              _lastname = value;
              dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "lastname", oldValue, value));
            }
        }
public function get lastname():String {
            return _lastname;
        }

public function set phone(value:String):void {
            if(_phone != value){
              var oldValue:String = _phone;
              _phone = value;
              dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "phone", oldValue, value));
            }
        }
public function get phone():String {
            return _phone;
        }

public function set postal(value:String):void {
            if(_postal != value){
              var oldValue:String = _postal;
              _postal = value;
              dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "postal", oldValue, value));
            }
        }
public function get postal():String {
            return _postal;
        }

public function set street(value:String):void {
            if(_street != value){
              var oldValue:String = _street;
              _street = value;
              dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, "street", oldValue, value));
            }
        }
public function get street():String {
            return _street;
        }
override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void {
super.addEventListener(type, listener, useCapture, priority, useWeakReference);

}



public function readExternal(input:IDataInput):void {
_city = input.readObject() as String;
_firstname = input.readObject() as String;
_key = input.readObject() as String;
_lastname = input.readObject() as String;
_phone = input.readObject() as String;
_postal = input.readObject() as String;
_street = input.readObject() as String;
}

public function writeExternal(output:IDataOutput):void {
output.writeObject(_city);
output.writeObject(_firstname);
output.writeObject(_key);
output.writeObject(_lastname);
output.writeObject(_phone);
output.writeObject(_postal);
output.writeObject(_street);
}
    }
}