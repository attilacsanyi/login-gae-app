<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:flex="http://www.springframework.org/schema/flex"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!--
		The 'global-method-security' element is used to specify security
		settings that apply across an entire application context. In this
		case I have enabled annotation-based security by setting the attribute 
		'secured-annotations' to "enabled". Default value is 'disabled'.
		Now we are able to secure components and methods using the annotation 
		@Secured. 
	-->
	<security:global-method-security secured-annotations="enabled" />
	
	<!-- 
		Enable annotation-based configuration. We can use the annotation-based and the xml-based 
		configuration concurrently. 
		The customerService is configured using annotations.
		The pizzaService is configured within this file in xml. 
	-->
	<context:annotation-config />
	<context:component-scan base-package="app.configuration" />
	<context:component-scan base-package="app.repositories" />
	<context:component-scan base-package="app.services" />
	<context:component-scan base-package="app.mappers" />

	<!-- Instructs Spring to perform declarative transaction management on annotated classes -->
	<tx:annotation-driven />
	
</beans>